/* Minimum Number Of Squares
Send Feedback
Given an integer N, find and return the count of minimum numbers required to represent N as a sum of squares.
That is, if N is 4, then we can represent it as : {1^2 + 1^2 + 1^2 + 1^2} and {2^2}. The output will be 1, as 1 is the minimum count of numbers required to represent N as sum of squares.
Input format :
The first and the only line of input contains an integer value, 'N'.
 Output format :
Print the minimum count of numbers required.
Constraints :
0 <= n <= 10 ^ 4

Time Limit: 1 sec
Sample Input 1 :
12
Sample Output 1 :
3
Explanation of Sample Output 1 :
12 can be represented as : 
A) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)

B) (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2) + (1^2)  + (2 ^ 2)

C) (1^2) + (1^2) + (1^2) + (1^2) + (2 ^ 2) + (2 ^ 2)

D) (2 ^ 2) + (2 ^ 2) + (2 ^ 2)

As we can see, the output should be 3.
Sample Input 2 :
9
Sample Output 2 :
1 */

public class Solution {

    public static int minCount(int n) {
        //Your code goes here
        int[] dp = new int[n+1];
        for(int i = 0; i< dp.length;i++){
            dp[i] = -1;
        }

        return minCountIteratively(n,dp);
        
    }

    private static int minCountDp(int n,int[] dp){

        if(n == 0){
            return 0;
        }
        int min = Integer.MAX_VALUE;
        if( dp[n] == -1){
            //System.out.println("n=" + n);
            for (int i = 1; i*i <=n ; i++) {
            int localMin = minCountDp(n- (i * i),dp);
            min = 1 + Math.min(localMin,min);
            dp[n] = min;
            }
        }else{
            //System.out.println("n in else=" + n);
            return min = dp[n];
        }
        return min;

    }

    private static int minCountIteratively(int n, int dp[]){
        dp[0] = 0;
        for(int i =1 ; i<=n ;i++){
            int min = Integer.MAX_VALUE;
            for(int j = 1; j*j <= i ;j++){
                int localMin = dp[i - (j*j)];
                min = Math.min(min,localMin);
            }
            dp[i] = 1+min;
        }
        return dp[n];
    }

}