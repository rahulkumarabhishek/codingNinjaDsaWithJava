/*Largest Piece
Send Feedback
It's Gary's birthday today and he has ordered his favourite square cake consisting of '0's and '1's . But Gary wants the biggest piece of '1's and no '0's . A piece of cake is defined as a part which consist of only '1's, and all '1's share an edge with each other on the cake. Given the size of cake N and the cake, can you find the count of '1's in the biggest piece of '1's for Gary ?
Input Format :
The first line of input contains an integer, that denotes the value of N. 
Each of the following N lines contain N space separated integers.
Output Format :
Print the count of '1's in the biggest piece of '1's, according to the description in the task.
Constraints :
1 <= N <= 1000
Time Limit: 1 sec
Sample Input 1:
2
1 1
0 1
Sample Output 1:
3 */

public class Solution {

    static int[][] dir = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
	static int max = Integer.MIN_VALUE;
	static int count=0;

	public static int dfs(String[] edge, int n) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
		boolean[][] visited = new boolean[n][n];
		for (int i = 0; i <  n; i++) {
			for (int j = 0; j < n; j++) {
				if (!visited[i][j] && edge[i].charAt(j) == '1') {
					int ans = dfs(edge, i, j, visited);
					max = Math.max(ans, max);
				}

			}
		}

		return max;
		
	}

	private static int dfs(String[] edge,int row, int column,boolean[][] visited){
		int count =1;
		 visited[row][column] = true;
		
		 for(int i =0; i< dir.length;i++){
			 int x= row + dir[i][0];
			 int y = column + dir[i][1];

				if (x >= 0 && y >= 0 && x < edge.length && y < edge[x].length() && edge[x].charAt(y) == '1'
						&& !visited[x][y]) {
					count+=dfs(edge, x, y, visited);
				}
		 }

		 return count;


	}


}