/* 0 1 Knapsack - Problem
Send Feedback
A thief robbing a store can carry a maximal weight of W into his knapsack. There are N items, and i-th item weigh 'Wi' and the value being 'Vi.' What would be the maximum value V, that the thief can steal?
Input Format :
The first line of the input contains an integer value N, which denotes the total number of items.

The second line of input contains the N number of weights separated by a single space.

The third line of input contains the N number of values separated by a single space.

The fourth line of the input contains an integer value W, which denotes the maximum weight the thief can steal.
Output Format :
Print the maximum value of V that the thief can steal.
Constraints :
1 <= N <= 20
1<= Wi <= 100
1 <= Vi <= 100

Time Limit: 1 sec
Sample Input 1 :
4
1 2 4 5
5 4 8 6
5
Sample Output 1 :
13
Sample Input 2 :
5
12 7 11 8 9
24 13 23 15 16
26
Sample Output 2 :
51 */


public class Solution {

	public static int knapsack(int[] weights, int[] values, int n, int maxWeight) {
		//Your code goes here
		//return knapSackRecursive(weights, values, n, maxWeight, 0);

		int dp[][]=new int[n+1][maxWeight+1];
         for(int i=0;i<n+1;i++){
             for(int j=0;j<maxWeight+1;j++){
                 dp[i][j]=-1;
             }
         }
		return knapSackMemo(weights, values, n, maxWeight, 0,dp);
	}

	private static int knapSackRecursive(int[] weights, int[] values, int n, int maxWeight,int i){

		if(i == values.length || maxWeight == 0){
			return 0;
		}
		int ans = 0;
		if(weights[i]<=maxWeight){

			int ans1 = values[i] + knapSackRecursive(weights, values, n, maxWeight-weights[i], i+1);
			int ans2 = knapSackRecursive(weights, values, n, maxWeight, i+1);

			ans = Math.max(ans1,ans2);

		}else{
			ans = knapSackRecursive(weights, values, n, maxWeight, i+1);
		}
	    return ans; 

	}

	private static int knapSackMemo(int[] weights, int[] values, int n, int maxWeight,int i,int[][] dp){

		if(i == values.length || maxWeight == 0){
			return 0;
		}
		if(dp[i][maxWeight] != -1){
			return dp[i][maxWeight];
		}
		int ans = 0;
		if(weights[i]<=maxWeight){

			int ans1 = values[i] + knapSackMemo(weights, values, n, maxWeight-weights[i], i+1,dp);
			int ans2 = knapSackMemo(weights, values, n, maxWeight, i+1,dp);

			ans = Math.max(ans1,ans2);

		}else{
			ans = knapSackMemo(weights, values, n, maxWeight, i+1,dp);
		}
		dp[i][maxWeight] = ans;
	    return ans;

	}

	private static int knapSackItr(int[] weights, int[] values, int n, int maxWeight){
		
	}

}