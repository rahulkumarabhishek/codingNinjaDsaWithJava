/* Maximum Square Matrix With All Zeros
Send Feedback
Given an NxM matrix that contains only 0s and 1s, find out the size of the maximum square sub-matrix with all 0s. You need to return the size of the square matrix with all 0s.
Input format :
The first line of the test case contains two integer values, 'N' and 'M', separated by a single space. They represent the 'rows' and 'columns' respectively.

Second-line onwards, the next 'N' lines or rows represent the ith row values.

Each of the ith rows constitutes column values separated by a single space (Either 0 or 1).
Output Format:
Print the size of maximum square sub-matrix.
 Constraints :
0 <= N <= 10^4
0 <= M <= 10^4

Time Limit: 1 sec
Sample Input 1:
3 3
1 1 0
1 1 1
1 1 1
Sample Output 1:
1
Sample Input 2:
4 4
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
Sample Output 2:
4 */

import java.util.Arrays;

public class Solution {
    private static int max =0;

    public static int findMaxSquareWithAllZeros(int[][] input){
        
    /* Your class should be named Solution.
     * Don't write main() function.
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */

     //recursive
    //  findMaxSquareWithAllZeros(input, 0, 0);
    //  return max;

    if(input.length==0 || input[0].length==0) return 0;

    int dp[][] = new int[input.length][input[0].length];
     for(int arr[]:dp){
         Arrays.fill(arr,-1);
     }
      findMaxSquareWithAllZerosMemo(input, 0, 0, dp);

     return max;
    
    }

    private static int findMaxSquareWithAllZeros(int[][] input, int i, int j){

        if(i >= input.length || j >= input[0].length){
            return 0;
        }

         int right = findMaxSquareWithAllZeros(input, i, j + 1);
         int diagonal = findMaxSquareWithAllZeros(input, i + 1, j+1);
         int down = findMaxSquareWithAllZeros(input, i + 1, j);
        
         int localMax = 0;
    
         if(input[i][j] == 0){
             localMax = 1 + Math.min(diagonal,Math.min(right,down));
         }
         max = Math.max(max, localMax);
        return localMax;

    }

    private static int findMaxSquareWithAllZerosMemo(int[][] input, int i, int j,int dp[][]){

        if(i >= input.length || j >= input[0].length){
            return 0;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

         int right = findMaxSquareWithAllZerosMemo(input, i, j + 1,dp);
         int diagonal = findMaxSquareWithAllZerosMemo(input, i + 1, j+1,dp);
         int down = findMaxSquareWithAllZerosMemo(input, i + 1, j,dp);
        
         int localMax = 0;
    
         if(input[i][j] == 0){
             dp[i][j] = 1 + Math.min(diagonal,Math.min(right,down));
         }else{
             return dp[i][j] = 0;
         }
         max = Math.max(max, dp[i][j]);
        return dp[i][j];

    }

    
}