/*Second Largest Element In Tree
Send Feedback
Given a generic tree, find and return the node with second largest value in given tree. Return NULL if no node with required value is present.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output format:
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40
*/



public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
		
	private static TreeNode<Integer> max = new TreeNode<>(Integer.MIN_VALUE);
	private static TreeNode<Integer> secondMax = max;
	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){
		// Write your code here
		if(root == null){
			return null;
		}
		//System.out.println("root="+root.data);
		if(root.data>max.data){
			secondMax = max;
			max = root;
		}else if (root.data > secondMax.data && root.data != max.data)
            secondMax = root;

			// System.out.println("max="+max.data);
			// System.out.println("secondMax="+secondMax.data);

		for(TreeNode<Integer> child : root.children){
			findSecondLargest(child);
		}

		return secondMax;

	}
	
	
}
